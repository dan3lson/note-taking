var type = "<%= @note_type.name.downcase %>";
var $note_body = $("#" + type + "-note-body");
var $note_card = $note_body.parent();

display_updated_note(type);
empty_create_edit_note_container();

function auto_close_alert(selector, delay) {
	setTimeout(function() { $(selector).fadeOut() }, delay);
}

function create_elem(elem, elem_class, elem_id) {
	elem_class = elem_class ||  null;
	elem_id = elem_id || null;

	return $("<" + elem + ">", { class: elem_class, id: elem_id });
}

function display_success_message() {
	var partial = "<%= j render(partial: 'notes/success_message', locals: { message: @message }) %>";

	$note_body.prepend(partial);
	auto_close_alert(".alert-success", 2000);
}

function display_updated_note(type) {
	var content = "<%= j render(partial: 'notes/update_note', locals: { content: @note.content }) %>";
	var last_updated = "<%= j render(partial: 'notes/last_updated', locals: { meeting: @meeting, note_id: @note_type.id }) %>";

	scroll_to($note_card);
	$note_body.empty();
	$note_body.hide().html(content).fadeIn(400);
	$note_body.append(last_updated);
	display_success_message();
}

function empty_create_edit_note_container() {
	var default_text = create_elem("small", "medium-gray");

	default_text.append(
		"Tap 'Add', 'Update', or 'Delete' above to create, " +
		"edit, or remove a Pre, Current, or Post note for this meeting."
	)
	$(".create-edit-note-container").html(default_text)
}

function scroll_to(location) {
	$("html, body").animate({ scrollTop: location.offset().top }, "slow");
};
