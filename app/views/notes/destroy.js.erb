var type = "<%= @note_type.name.downcase %>";

refresh_note_btn_container();
refresh_note_body();
display_destroy_message();
empty_create_edit_note_container();

function auto_close_alert(selector, delay) {
	setTimeout(function() {
		$(selector).fadeOut()
	}, delay);
}

function create_elem(elem, elem_class, elem_id) {
	elem_class = elem_class ||  null;
	elem_id = elem_id || null;

	return $("<" + elem + ">", { class: elem_class, id: elem_id });
}

function display_destroy_message() {
	var $note_body_container = $("#" + type + "-note-body");
	var partial = "<%= j render(partial: 'notes/destroy', locals: { message: @message }) %>";

	scroll_to($note_body_container.parent());
	$note_body_container.prepend(partial);
	auto_close_alert(".alert-success", 2000);
}

function empty_create_edit_note_container() {
	var default_text = create_elem("small", "medium-gray");

	default_text.append(
		"Tap 'Add', 'Update', or 'Delete' above to create, " +
		"edit, or remove a Pre, Current, or Post note for this meeting."
	)
	$(".create-edit-note-container").html(default_text)
}

function refresh_note_body() {
	var $note_body = $("#" + type + "-note-body");
	var $default_text = create_elem("small", "medium-gray");
	$default_text.append("Empty");
	$note_body.hide().html($default_text).fadeIn(400);
}

function refresh_note_btn_container() {
	var $note_btn_container = $("#" + type + "-note-btn-container");
	var meeting_id = "<%= @meeting.id %>";
	var $add_link = $("<a>", {
		"data-remote": "true",
		href: "/meetings/" + meeting_id + "/notes/new?note_type=" +
					upcase_first_letter(type),
		text: "Add"
	});
	var $add_link_container = create_elem("small", "green");

	$add_link_container.append($add_link);
	$note_btn_container.hide().html($add_link_container).fadeIn(400);
}

function upcase_first_letter(string) {
	return string.replace(string[0], function(letter) {
    return letter.toUpperCase();
	});
}
